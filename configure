#!/usr/bin/env zsh
#alias coreos-installer='podman run --pull=always            \
#                        --rm --tty --interactive            \
#                        --security-opt label=disable        \
#                        --volume ${PWD}:/pwd --workdir /pwd \
#                        quay.io/coreos/coreos-installer:release'
#  independent variables - set defaults here if not specified by
#  the environment, or override with CLI opts
usage () {
    ret=$2
    cat <<- EOF >&2
refactor-octo-chainsaw (c) 2020 Joanna Doyle
this software is not yet licensed and comes with NO WARRANTY


The purpose is for this script, along with Dockerfile, _build, _run
and a template YAML file to provision and launch containerised systems
inside Fedora CoreOS, running on the cloud.

./init-run will also run this plus ./build and ./run.
If the desired container and the Ignition file are already prepared,
you can just run ./run.

Usage: $1 [ --fc tag ] [ -h] [ --id ssh-id-file ] [ -p port ] \\
          --yml [_]template.yaml [ instance/vm-name ]

    --fc  -- the tag for the FCOS to provision, stable by default
                ENV: FCOS_STREAM

    -h    -- print this message and exit

    --id  -- tells us where to look for public SSH key, in some cases
            the program will correct if you supply a private key,
            but please don't, defaults to ~/.ssh/id_rsa.pub 
                ENV: SSH_ID_FILE

    -p    -- port to forward for container images defaults to 5000
                ENV: ZNC_PORT

    --yml -- the name of the YAML template file used to configure and
            provision the FCOS box - if the filename begins with '_',
            the configure script will run envsubst on _file, then
            pass the new file to fcct
                ENV: YAML

    [ instance-or-vm-name ] this will be the hostname and VM or
    instance name on whatever cloud platform - this build system is
    currently designed for ZNC container on FCOS running on google
    cloud compute, but tweaks to the _run script may see it deployed
    more broadly. Many options are not necessary to touch, but I
    wanted a set of build scripts that could be potentially used for
    various other podman on FCOS setups, hence try to make this
    quite configurable.
EOF
    exit $ret
}
#
##fixarg () {
#    return $($1 | sed -E 's/^--?\w+ +//')
#}

# translation of options to env var types
typeset -A opt_trans
opt_trans=(--fc FCOS_STREAM \
    -h HELP \
    --id SSH_ID_FILE \
    -p ZNC_PORT \
    --yml YAML)
 
# prepare defaults
typeset -A opt_hash
opt_hash=(--fc ${FCOS_STREAM:-stable} \
   -h "" \
   --id ${SSH_ID_FILE:-~/.ssh/id_rsa.pub} \
   -p ${ZNC_PORT:-5000} \
   --yml ${YAML:-_fcct-znc-pod.yaml})
    
# set overrides
zparseopts -K -D -A opt_hash \
    -- -fc: h -id: p: -yml:

for i in ${(k)opt_hash}; do
     export ${opt_trans[$i]}=${opt_hash[$i]}
done

if [ -n "$HELP" ]; then
    usage $0 0
fi

export VM_NAME=${VM_NAME:-sleepysapphic}
if [[ $# > 1 ]]; then
    usage $0 1
elif [[ $# > 0 ]]; then
    vm=$(echo $* | cut -f1 -d' ')
fi
# using :+ here is too high risk for clobbering the default
export VM_NAME=${vm:-$VM_NAME}

if [ ! -e ${SSH_ID_FILE} ] && [ ! -e ${SSH_ID_FILE}.pub ]; then
    echo "could not locate ssh-keyfile ${SSH_ID_FILE},"
    echo "nor ${SSH_ID_FILE}.pub"
    usage $0 1
fi

file -L ${SSH_ID_FILE} | grep 'private'
if [[ $? -eq 0 ]]; then
    echo "could not locate ssh-keyfile ${SSH_ID_FILE},"
    if [[ $SSH_ID_FILE =~ \.pub$ ]]; then
        usage $0 1
    fi
    export SSH_ID_FILE=${SSH_ID_FILE}.pub
    echo "trying ${SSH_ID_FILE}"
    if [ ! -e ${SSH_ID_FILE} ]; then
        echo "nor ${SSH_ID_FILE}.pub"
        usage $0 1
    fi
fi

# dependent variables
#export REGISTRY_IP=$(getent hosts ${REGISTRY_HOST} | cut -f1 -d' ')
export SSH_PUB_KEY=$(cat ${SSH_ID_FILE})
#export GPG_KEY=$(gpg -a --export ${GPG_KEY_ID})
export CONFIG=${CONFIG:-${VM_NAME}.json}
name=$(id -u --name)
export REAL_NAME=$(getent passwd ${name} | cut -f5 -d: | cut -f1 -d,)
export ZNC_NICK=${name}

# set a password for ZNC
while [[ -z "${ZNC_PASS}" ]]; do
    read -rs 'pw?ZNC Password: ' </dev/tty
    read -rs 'check?Repeat Password: ' </dev/tty
    [[ "$pw"=="$check" ]] && export ZNC_PASS=$pw
done

# fix annoying space issue in GPG_KEY
# ... there really should be a better way to do this

alias ignition-validate='podman run --rm --tty --interactive \
                         --security-opt label=disable        \
                         --volume ${PWD}:/pwd --workdir /pwd \
                         quay.io/coreos/ignition-validate:release'

alias fcct='podman run --rm --tty --interactive \
            --security-opt label=disable        \
            --volume ${PWD}:/pwd --workdir /pwd \
            quay.io/coreos/fcct:release'

# envsubst if we have a yaml starting with underscore
if [[ ${YAML} =~ ^_ ]]; then
    export YAML=$(echo ${YAML} | sed -E 's/^_//')
    envsubst <_${YAML} >${YAML}
fi

# convert to ignition!!
fcct --pretty --strict ${YAML} --output ${CONFIG}
ignition-validate ${CONFIG} || echo 'Ignition JSON invalid' >&2
envsubst <_run >run
chmod a+x run
